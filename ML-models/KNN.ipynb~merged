{
 "cells": [
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 10,
   "id": "cd12c417",
   "metadata": {},
   "outputs": [],
   "source": [
=======
   "execution_count": 8,
   "id": "76c900c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Adding in our libraries and data file\n",
>>>>>>> 483ddaf1dd8f82da3bd438ff6b02a3098d917d83
    "%matplotlib inline\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split\n",
    "from collections import Counter\n",
    "import matplotlib.pyplot as plt\n",
    "from matplotlib import pyplot as plt\n",
    "import numpy as np\n",
    "from sklearn.neighbors import KNeighborsClassifier\n",
    "from imblearn.over_sampling import RandomOverSampler\n",
    "from sklearn.metrics import confusion_matrix, classification_report"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 3,
   "id": "85addde0",
=======
   "execution_count": 9,
   "id": "87e025e6",
>>>>>>> 483ddaf1dd8f82da3bd438ff6b02a3098d917d83
   "metadata": {},
   "outputs": [],
   "source": [
    "survival_df = pd.read_csv(\"/Users/lindseyvalput/Desktop/Patient-Survival-Model/Resources/cleaned_data_survival_prediction.csv\")"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 4,
   "id": "1e1057fa",
=======
   "execution_count": 13,
   "id": "782912c4",
>>>>>>> 483ddaf1dd8f82da3bd438ff6b02a3098d917d83
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>age</th>\n",
       "      <th>bmi</th>\n",
       "      <th>elective_surgery</th>\n",
       "      <th>ethnicity</th>\n",
       "      <th>gender</th>\n",
       "      <th>height</th>\n",
       "      <th>icu_admit_source</th>\n",
<<<<<<< HEAD
       "      <th>icu_id</th>\n",
       "      <th>icu_stay_type</th>\n",
       "      <th>icu_type</th>\n",
=======
       "      <th>icu_stay_type</th>\n",
       "      <th>icu_type</th>\n",
       "      <th>pre_icu_los_days</th>\n",
>>>>>>> 483ddaf1dd8f82da3bd438ff6b02a3098d917d83
       "      <th>...</th>\n",
       "      <th>cirrhosis</th>\n",
       "      <th>diabetes_mellitus</th>\n",
       "      <th>hepatic_failure</th>\n",
       "      <th>immunosuppression</th>\n",
       "      <th>leukemia</th>\n",
       "      <th>lymphoma</th>\n",
       "      <th>solid_tumor_with_metastasis</th>\n",
       "      <th>apache_3j_bodysystem</th>\n",
       "      <th>apache_2_bodysystem</th>\n",
       "      <th>hospital_death</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>68.0</td>\n",
       "      <td>22.730000</td>\n",
       "      <td>0</td>\n",
       "      <td>Caucasian</td>\n",
       "      <td>M</td>\n",
       "      <td>180.3</td>\n",
       "      <td>Floor</td>\n",
<<<<<<< HEAD
       "      <td>92</td>\n",
       "      <td>admit</td>\n",
       "      <td>CTICU</td>\n",
=======
       "      <td>admit</td>\n",
       "      <td>CTICU</td>\n",
       "      <td>0.541667</td>\n",
>>>>>>> 483ddaf1dd8f82da3bd438ff6b02a3098d917d83
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Sepsis</td>\n",
       "      <td>Cardiovascular</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>77.0</td>\n",
       "      <td>27.420000</td>\n",
       "      <td>0</td>\n",
       "      <td>Caucasian</td>\n",
       "      <td>F</td>\n",
       "      <td>160.0</td>\n",
       "      <td>Floor</td>\n",
<<<<<<< HEAD
       "      <td>90</td>\n",
       "      <td>admit</td>\n",
       "      <td>Med-Surg ICU</td>\n",
=======
       "      <td>admit</td>\n",
       "      <td>Med-Surg ICU</td>\n",
       "      <td>0.927778</td>\n",
>>>>>>> 483ddaf1dd8f82da3bd438ff6b02a3098d917d83
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Respiratory</td>\n",
       "      <td>Respiratory</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>67.0</td>\n",
       "      <td>27.560000</td>\n",
       "      <td>0</td>\n",
       "      <td>Caucasian</td>\n",
       "      <td>M</td>\n",
       "      <td>190.5</td>\n",
       "      <td>Accident &amp; Emergency</td>\n",
<<<<<<< HEAD
       "      <td>95</td>\n",
       "      <td>admit</td>\n",
       "      <td>Med-Surg ICU</td>\n",
=======
       "      <td>admit</td>\n",
       "      <td>Med-Surg ICU</td>\n",
       "      <td>0.000694</td>\n",
>>>>>>> 483ddaf1dd8f82da3bd438ff6b02a3098d917d83
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Neurological</td>\n",
       "      <td>Neurologic</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>72.0</td>\n",
       "      <td>28.257052</td>\n",
       "      <td>1</td>\n",
       "      <td>Hispanic</td>\n",
       "      <td>F</td>\n",
       "      <td>154.9</td>\n",
       "      <td>Operating Room / Recovery</td>\n",
<<<<<<< HEAD
       "      <td>113</td>\n",
       "      <td>admit</td>\n",
       "      <td>Med-Surg ICU</td>\n",
=======
       "      <td>admit</td>\n",
       "      <td>Med-Surg ICU</td>\n",
       "      <td>0.004861</td>\n",
>>>>>>> 483ddaf1dd8f82da3bd438ff6b02a3098d917d83
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Respiratory</td>\n",
       "      <td>Respiratory</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>46.0</td>\n",
       "      <td>25.845717</td>\n",
       "      <td>0</td>\n",
       "      <td>Hispanic</td>\n",
       "      <td>M</td>\n",
       "      <td>167.6</td>\n",
       "      <td>Accident &amp; Emergency</td>\n",
<<<<<<< HEAD
       "      <td>92</td>\n",
       "      <td>admit</td>\n",
       "      <td>CTICU</td>\n",
=======
       "      <td>admit</td>\n",
       "      <td>CTICU</td>\n",
       "      <td>0.000000</td>\n",
>>>>>>> 483ddaf1dd8f82da3bd438ff6b02a3098d917d83
       "      <td>...</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Respiratory</td>\n",
       "      <td>Respiratory</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
<<<<<<< HEAD
       "<p>5 rows × 81 columns</p>\n",
=======
       "<p>5 rows × 80 columns</p>\n",
>>>>>>> 483ddaf1dd8f82da3bd438ff6b02a3098d917d83
       "</div>"
      ],
      "text/plain": [
       "    age        bmi  elective_surgery  ethnicity gender  height  \\\n",
       "0  68.0  22.730000                 0  Caucasian      M   180.3   \n",
       "1  77.0  27.420000                 0  Caucasian      F   160.0   \n",
       "2  67.0  27.560000                 0  Caucasian      M   190.5   \n",
       "3  72.0  28.257052                 1   Hispanic      F   154.9   \n",
       "4  46.0  25.845717                 0   Hispanic      M   167.6   \n",
       "\n",
<<<<<<< HEAD
       "            icu_admit_source  icu_id icu_stay_type      icu_type  ...  \\\n",
       "0                      Floor      92         admit         CTICU  ...   \n",
       "1                      Floor      90         admit  Med-Surg ICU  ...   \n",
       "2       Accident & Emergency      95         admit  Med-Surg ICU  ...   \n",
       "3  Operating Room / Recovery     113         admit  Med-Surg ICU  ...   \n",
       "4       Accident & Emergency      92         admit         CTICU  ...   \n",
       "\n",
       "   cirrhosis  diabetes_mellitus  hepatic_failure  immunosuppression  leukemia  \\\n",
       "0        0.0                1.0              0.0                0.0       0.0   \n",
       "1        0.0                1.0              0.0                0.0       0.0   \n",
       "2        0.0                1.0              0.0                0.0       0.0   \n",
       "3        0.0                0.0              0.0                1.0       0.0   \n",
       "4        0.0                0.0              0.0                0.0       0.0   \n",
       "\n",
       "   lymphoma  solid_tumor_with_metastasis  apache_3j_bodysystem  \\\n",
       "0       0.0                          0.0                Sepsis   \n",
       "1       0.0                          0.0           Respiratory   \n",
       "2       0.0                          0.0          Neurological   \n",
       "3       0.0                          0.0           Respiratory   \n",
       "4       0.0                          0.0           Respiratory   \n",
=======
       "            icu_admit_source icu_stay_type      icu_type  pre_icu_los_days  \\\n",
       "0                      Floor         admit         CTICU          0.541667   \n",
       "1                      Floor         admit  Med-Surg ICU          0.927778   \n",
       "2       Accident & Emergency         admit  Med-Surg ICU          0.000694   \n",
       "3  Operating Room / Recovery         admit  Med-Surg ICU          0.004861   \n",
       "4       Accident & Emergency         admit         CTICU          0.000000   \n",
       "\n",
       "   ...  cirrhosis  diabetes_mellitus  hepatic_failure  immunosuppression  \\\n",
       "0  ...        0.0                1.0              0.0                0.0   \n",
       "1  ...        0.0                1.0              0.0                0.0   \n",
       "2  ...        0.0                1.0              0.0                0.0   \n",
       "3  ...        0.0                0.0              0.0                1.0   \n",
       "4  ...        0.0                0.0              0.0                0.0   \n",
       "\n",
       "   leukemia  lymphoma  solid_tumor_with_metastasis  apache_3j_bodysystem  \\\n",
       "0       0.0       0.0                          0.0                Sepsis   \n",
       "1       0.0       0.0                          0.0           Respiratory   \n",
       "2       0.0       0.0                          0.0          Neurological   \n",
       "3       0.0       0.0                          0.0           Respiratory   \n",
       "4       0.0       0.0                          0.0           Respiratory   \n",
>>>>>>> 483ddaf1dd8f82da3bd438ff6b02a3098d917d83
       "\n",
       "   apache_2_bodysystem  hospital_death  \n",
       "0       Cardiovascular               0  \n",
       "1          Respiratory               0  \n",
       "2           Neurologic               0  \n",
       "3          Respiratory               0  \n",
       "4          Respiratory               0  \n",
       "\n",
<<<<<<< HEAD
       "[5 rows x 81 columns]"
      ]
     },
     "execution_count": 4,
=======
       "[5 rows x 80 columns]"
      ]
     },
     "execution_count": 13,
>>>>>>> 483ddaf1dd8f82da3bd438ff6b02a3098d917d83
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "survival_df.head()"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 5,
   "id": "2294ecd6",
   "metadata": {},
   "outputs": [],
   "source": [
    "survival_df_features = survival_df[['apache_4a_hospital_death_prob', 'apache_4a_icu_death_prob',\n",
    "                                  'd1_spo2_min', 'd1_temp_min', 'd1_sysbp_noninvasive_min',\n",
    "                                  'd1_sysbp_min', 'd1_heartrate_min', 'heart_rate_apache',\n",
    "                                  'apache_3j_diagnosis', 'pre_icu_los_days','hospital_death']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "a75cae01",
   "metadata": {},
   "outputs": [],
   "source": [
    "X = survival_df_features.drop('hospital_death', axis=1)\n",
    "y = survival_df_features['hospital_death']"
=======
   "execution_count": 14,
   "id": "961ed6ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "#labeling our X variable to drop our target variable\n",
    "#setting our y variable to be our target variable\n",
    "X = survival_df.drop('hospital_death', axis=1)\n",
    "y = survival_df['hospital_death']"
>>>>>>> 483ddaf1dd8f82da3bd438ff6b02a3098d917d83
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 7,
   "id": "7ff56d13",
   "metadata": {},
   "outputs": [],
   "source": [
=======
   "execution_count": 15,
   "id": "f93b31cb",
   "metadata": {},
   "outputs": [],
   "source": [
    "#dummy-coding the rest of our X categorical variables\n",
>>>>>>> 483ddaf1dd8f82da3bd438ff6b02a3098d917d83
    "X = pd.get_dummies(X)"
   ]
  },
  {
   "cell_type": "markdown",
<<<<<<< HEAD
   "id": "78944ef5",
   "metadata": {},
   "source": [
    "### Balance the data set - OVERsampling"
=======
   "id": "51b35869",
   "metadata": {},
   "source": [
    "### Balance the data set - OVERsampling\n",
    "\n",
    "#### Since our data was not evenly distributed, we decided to use a method called OVERsampling to help compensate."
>>>>>>> 483ddaf1dd8f82da3bd438ff6b02a3098d917d83
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 8,
   "id": "c70b20b2",
=======
   "execution_count": 16,
   "id": "c70d4e89",
>>>>>>> 483ddaf1dd8f82da3bd438ff6b02a3098d917d83
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Original dataset shape Counter({0: 52044, 1: 4891})\n",
      "Resample dataset shape Counter({0: 52044, 1: 52044})\n"
     ]
    }
   ],
   "source": [
    "#Balance Data - oversampling\n",
    "ros = RandomOverSampler(random_state=42)\n",
    "\n",
    "x_ros, y_ros = ros.fit_resample(X, y)\n",
    "\n",
    "print('Original dataset shape', Counter(y))\n",
    "print('Resample dataset shape', Counter(y_ros))"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 12,
   "id": "d75cf009",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "k: 1, Train/Test Score: 1.000/0.961\n",
      "k: 3, Train/Test Score: 0.961/0.928\n",
      "k: 5, Train/Test Score: 0.928/0.899\n",
      "k: 7, Train/Test Score: 0.900/0.872\n",
      "k: 9, Train/Test Score: 0.877/0.847\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "X_train, X_test, y_train, y_test = train_test_split(x_ros, y_ros, random_state=45)\n",
    "\n",
=======
   "execution_count": 17,
   "id": "afda6ef2",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Splitting our data into train and test\n",
    "X_train, X_test, y_train, y_test = train_test_split(x_ros, y_ros, random_state=45)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4f57b115",
   "metadata": {},
   "outputs": [],
   "source": [
    "#Running KNN\n",
>>>>>>> 483ddaf1dd8f82da3bd438ff6b02a3098d917d83
    "train_scores = []\n",
    "test_scores = []\n",
    "for k in range(1, 10, 2):\n",
    "    knn = KNeighborsClassifier(n_neighbors=k)\n",
    "    knn.fit(X_train, y_train)\n",
    "    train_score = knn.score(X_train, y_train)\n",
    "    test_score = knn.score(X_test, y_test)\n",
    "    train_scores.append(train_score)\n",
    "    test_scores.append(test_score)\n",
    "    print(f\"k: {k}, Train/Test Score: {train_score:.3f}/{test_score:.3f}\")\n",
    "    \n",
    "    \n",
    "plt.plot(range(1, 10, 2), train_scores, marker='o')\n",
    "plt.plot(range(1, 10, 2), test_scores, marker=\"x\")\n",
    "plt.xlabel(\"k neighbors\")\n",
    "plt.ylabel(\"Testing accuracy Score\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
<<<<<<< HEAD
   "execution_count": 13,
   "id": "88bf7b93",
=======
   "execution_count": 18,
   "id": "ac02db31",
>>>>>>> 483ddaf1dd8f82da3bd438ff6b02a3098d917d83
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
<<<<<<< HEAD
      "k=3 Test Acc: 0.928\n",
      "[[11231  1852]\n",
      " [   22 12917]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      0.86      0.92     13083\n",
      "           1       0.87      1.00      0.93     12939\n",
=======
      "k=3 Test Acc: 0.934\n",
      "[[11381  1702]\n",
      " [   24 12915]]\n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       1.00      0.87      0.93     13083\n",
      "           1       0.88      1.00      0.94     12939\n",
>>>>>>> 483ddaf1dd8f82da3bd438ff6b02a3098d917d83
      "\n",
      "    accuracy                           0.93     26022\n",
      "   macro avg       0.94      0.93      0.93     26022\n",
      "weighted avg       0.94      0.93      0.93     26022\n",
      "\n"
     ]
    }
   ],
   "source": [
<<<<<<< HEAD
=======
    "#Testing our model\n",
>>>>>>> 483ddaf1dd8f82da3bd438ff6b02a3098d917d83
    "knn = KNeighborsClassifier(n_neighbors=3)\n",
    "knn.fit(X_train, y_train)\n",
    "\n",
    "y_true = y_test\n",
    "y_pred = knn.predict(X_test)\n",
    "\n",
    "print('k=3 Test Acc: %.3f' % knn.score(X_test, y_test))\n",
    "print(confusion_matrix(y_true, y_pred))\n",
    "print(classification_report(y_true, y_pred))\n"
   ]
<<<<<<< HEAD
=======
  },
  {
   "cell_type": "markdown",
   "id": "ea961872",
   "metadata": {},
   "source": [
    "### Since there is a large amount of features, we want to see which features are the most important. Below we are running feature importance."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0503dbda",
   "metadata": {},
   "outputs": [],
   "source": [
    "features = sorted(zip(X.columns, knn.feature_importances_), key = lambda x: x[1])\n",
    "cols = [f[0] for f in features]\n",
    "width = [f[1] for f in features]\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "\n",
    "fig.set_size_inches(10,200)\n",
    "plt.margins(y=0.001)\n",
    "\n",
    "ax.barh(y=cols, width=width)\n",
    "\n",
    "plt.show()"
   ]
>>>>>>> 483ddaf1dd8f82da3bd438ff6b02a3098d917d83
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python [conda env:PythonData38] *",
   "language": "python",
   "name": "conda-env-PythonData38-py"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
